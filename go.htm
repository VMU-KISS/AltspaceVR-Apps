<!DOCTYPE html>
<html><head>
<meta http-equiv="content-type" content="text/html; charset=windows-1252">
<title>AltSpace Go</title>
<script src="http://sdk.altvr.com/libs/three.js/r73/build/three.js"></script>
<script src="http://sdk.altvr.com/libs/altspace.js/0.5.3/altspace.min.js"></script>
<script src="http://sdk.altvr.com/libs/three.js/r73/examples/js/loaders/OBJMTLLoader.js"></script>
<script src="http://sdk.altvr.com/libs/three.js/r73/examples/js/loaders/MTLLoader.js"></script>
<script src="tween.js"></script>
<script src="js/goData.js"></script>
<style> 
#panel, .flip {
    font-size: 38px;
	font-family: "Lucida Sans Unicode", "Lucida Grande", sans-serif;
    padding: 0px;
    text-align: center;
    background-color: #24497e;
    color: white;
    border: solid 0px #ffe6cc;
    margin: auto;
	display: none;
}

</style>
</head>
<body>
<div id="panel">
<b>A user has requested to reset the game.</b><br>
Resetting game in 10 seconds.<br><br></div>
<script>
var playercol = 0;
var gos1;
var gos2;

// Setup ThreeJS Scene for AltSpaceVR
var scene = new THREE.Scene();
var renderer = altspace.getThreeJSRenderer();
// Creation of Go Table and Bowls
new THREE.OBJMTLLoader().load('/models/go/board.obj', '/models/go/board.mtl', function(object) {
	var board = object;
	board.scale.set(1000, 700, 1000);
	board.position.set(0, -300, 0);
	scene.add(board);
});

new THREE.OBJMTLLoader().load('/models/go/leg.obj', '/models/go/leg.mtl', function(object) {
	var leg1 = object.clone();
	leg1.scale.set(1000, 1000, 1000);
	leg1.position.set(175, -400, 175);
	scene.add(leg1);

	var leg2 = object.clone();
	leg2.scale.set(1000, 1000, 1000);
	leg2.position.set(-175, -400, 175);
	scene.add(leg2);

	var leg3 = object.clone();
	leg3.scale.set(1000, 1000, 1000);
	leg3.position.set(175, -400, -175);
	scene.add(leg3);

	var leg4 = object.clone();
	leg4.scale.set(1000, 1000, 1000);
	leg4.position.set(-175, -400, -175);
	scene.add(leg4);
});

new THREE.OBJMTLLoader().load('/models/go/bowl.obj', '/models/go/bowl.mtl', function(object) {
	var bowl1 = object.clone();
	bowl1.scale.set(1000, 700, 1000);
	bowl1.position.set(-400, -500, 0);
	scene.add(bowl1);

	var bowl2 = object.clone();
	bowl2.scale.set(1000, 700, 1000);
	bowl2.position.set(400, -500, 0);
	scene.add(bowl2);
});

new THREE.OBJMTLLoader().load('/models/go/gos1.obj', '/models/go/gos1.mtl', function(object) {
	gos1 = object;
	gos1.scale.set(1000, 1000, 1000);
	gos1.position.set(-400, -453, 0);
	scene.add(gos1);
	gos1.addEventListener('cursordown', function() {
	playercol = 1;
	syncPlayer1.set((1));
	});
});

new THREE.OBJMTLLoader().load('/models/go/gos2.obj', '/models/go/gos2.mtl', function(object) {
	gos2 = object;
	gos2.scale.set(1000, 1000, 1000);
	gos2.position.set(400, -453, 0);
	scene.add(gos2);
	gos2.addEventListener('cursordown', function() {
	playercol = 2;
	syncPlayer2.set((1));
	});
});

new THREE.OBJMTLLoader().load('/models/go/lid1.obj', '/models/go/lid1.mtl', function(object) {
	var lid1 = object.clone();
	lid1.scale.set(1000, 1000, 1000);
	lid1.position.set(400, -500, 150);
	lid1.rotation.set(180 * (Math.PI / 180), 0 * (Math.PI / 180), 0 * (Math.PI / 180));
	scene.add(lid1);
	lid1.addEventListener('cursordown', function() {
	if (playercol == 0) {
	syncTimeron.set((1));
	} else {
	reset();
	}
	}); 
});

new THREE.OBJMTLLoader().load('/models/go/lid2.obj', '/models/go/lid2.mtl', function(object) {
	var lid2 = object.clone();
	lid2.scale.set(1000, 1000, 1000);
	lid2.position.set(400, -500, 150);
	lid2.position.set(-400, -500, -150);
	lid2.rotation.set(180 * (Math.PI / 180), 0 * (Math.PI / 180), 0 * (Math.PI / 180));
	scene.add(lid2);
});

new THREE.OBJMTLLoader().load('/models/go/cancel.obj', '/models/go/cancel.mtl', function(object) {
cancel = object;
cancel.scale.set(5, 5, 5);
cancel.position.set(0, -700, 0);
cancel.rotation.x = 180 * (Math.PI / 180);
scene.add(cancel);

cancel.addEventListener('cursordown', function()
{
if (playercol == 0) {
} else {
document.getElementById("panel").style.display = "none";
syncTimeroff.set('1');
}
});
});

// Creation of Model Variables
var gos = [];
var syncGos = [];
var markers = [];

// Creation of Go stones
new THREE.OBJMTLLoader().load('/models/go/go1.obj', '/models/go/go1.mtl', function(object) {
	for (var i = 0; i < 362; i++) {
		(function(i) {
			var go = object.clone();
			var goMaterial = new THREE.MeshBasicMaterial({
				color: '#ffffff'
			});
			go.traverse(function (child) {
				if (child instanceof THREE.Mesh) {
					child.material = goMaterial;
				}
			});
			go.name = 'goPiece+'+i;
			var pos = goPosition[i];
			if (!pos) {
				return console.warn('Missing', i);
			}

			go.position.set(pos[0], pos[1], pos[2]);

			go.scale.set(1000, 1000, 1000);
			scene.add(go);
			go.addEventListener('cursordown', function() {
				syncGos[i].set('#ff0000');
			});
			gos[i] = go;
		})(i);
	}
});

var markerMaterial = new THREE.MeshBasicMaterial({
	color: '#000000'
});
markerMaterial.visible = false;

// Creation of Markers
for (var i = 0; i < 362; i++) {
	(function(i) {
		// Creation of ThreeJS Geometry
		var geometry = new THREE.BoxGeometry(1, 1, 1);
		var marker = new THREE.Mesh(geometry, markerMaterial);
		marker.scale.set(10, 10, 10);
		var pos = markerPosition[i];
		if (!pos) {
			return console.warn('Missing', i);
		}
		marker.position.set(pos[0], pos[1], pos[2]);
		marker.rotation.set(0 * (Math.PI / 180), 45 * (Math.PI / 180), 0 * (Math.PI / 180));
		scene.add(marker);
		marker.addEventListener('cursordown', function() {
			if (playercol === 1) {
				syncGos[i].set('#ffffff');
			} else if (playercol === 2) {
				syncGos[i].set('#000000');
			}
		});
		markers[i] = marker;
	})(i);
}

// Setup of Sync
var config = {
	appId: "Sync-Go",
	authorId: "VMU-KISS"
};

altspace.utilities.sync.connect(config).then(function(connection) {
	for (var i = 0; i < 362; i++) {
		(function(i) {
			syncGos[i] = connection.instance.child('go' + i);
			syncGos[i].on('value', function(snapshot) {
				var val = snapshot.val();
				var go = gos[i];
				if (val && go) {
					go.traverse(function(child) {
					if (child instanceof THREE.Mesh) {
					child.material.color = new THREE.Color(val);
				}
			});
	GoTween(val, go);
			}
			});
		})(i);
	}
	syncTimeron = connection.instance.child('syncTimeron');
	syncTimeron.on('value', function(snapshot){
	var val = snapshot.val();
	if (val == 1) {
	restimeron();
	}
});

	syncTimeroff = connection.instance.child('syncTimeroff');
	syncTimeroff.on('value', function(snapshot){
	var val = snapshot.val();
	if (val == 1) {
	restimeroff();
	}
});
	syncPlayer = connection.instance.child('syncPlayer');
	syncPlayer.on('value', function(snapshot){
	var val = snapshot.val();
	if (val == 1) {
	playercol = 0;
	}
});
	syncPlayer1 = connection.instance.child('syncPlayer1');
	syncPlayer1.on('value', function(snapshot){
	var val = snapshot.val();
	if (val == 1) {
	gos1.position.y = -700;	
	} else if (val == 0) {
	gos1.position.y = -453
	}
});
	syncPlayer2 = connection.instance.child('syncPlayer2');
	syncPlayer2.on('value', function(snapshot){
	var val = snapshot.val();
	if (val == 1) {
	gos2.position.y = -700;	
	} else if (val == 0) {
	gos2.position.y = -453
	}
});
});
// Start AltSpaceVR Render
(function animate() {
	requestAnimationFrame(animate);
	renderer.render(scene);
	TWEEN.update();
})();

function GoTween(col, mesh) {
	var tween;
	if (col === '#ff0000') {
		tween = new TWEEN.Tween(mesh.position)
			.to({
				y: -315
			}, 2000);
		tween.easing(TWEEN.Easing.Elastic.In);
	} else {
		tween = new TWEEN.Tween(mesh.position)
			.to({
				y: -302
			}, 2000);
		tween.easing(TWEEN.Easing.Elastic.Out);
	}
	tween.start();
}

function restimeron() {
timer = setTimeout(reset, 10000);
document.getElementById("panel").style.display = "block";
cancel.position.y = 290;
}

function restimeroff() {
clearTimeout(timer);
document.getElementById("panel").style.display = "none";
cancel.position.y = -600;
}

function reset() {
document.getElementById("panel").style.display = "none";
cancel.position.y = -600;
gos1.position.y = -453
gos2.position.y = -453
for (i = 0; i < 362; i++) {
syncGos[i].set('#ff0000');
}
syncPlayer.set(1);
syncPlayer1.set(0);
syncPlayer2.set(0);
}

altspace.open('http://vmukiss.norybiak.com/models/go/html/popup.htm', '_experience', {
icon: 'http://vmukiss.norybiak.com/models/go/html/favicon.png',
hidden: true
}).then(function (_popup) {
popup = _popup;
});
</script>
</body></html>